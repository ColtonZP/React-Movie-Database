{"version":3,"sources":["NewMovie.js","Movie.js","MoviesList.js","MovieDetail.js","App.js","serviceWorker.js","index.js"],"names":["Movie","movie","MovieDiv","Poster","src","poster_path","alt","title","NewMovieCard","overview","to","id","styled","div","img","PopularMovie","key","MoviesList","state","nowPlayingMovies","nowPlayingPage","popularMovies","changePage","pageValue","this","setState","prevState","fetch","nowPlaying","json","popular","results","NewMovieGrid","map","NewMovie","PageControl","onClick","MovieGrid","Component","button","W154_PATH","MovieDetail","movieCast","similarMovies","match","props","params","movieFetch","movieCreditsFetch","similarMoviesFetch","cast","slice","MovieWrapper","MovieBackdrop","backdrop","backdrop_path","MovieInfo","Rating","rating","vote_average","release_date","Cast","profile_path","name","character","length","Similar","span","App","basename","className","Header","exact","path","component","render","Date","now","header","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i1CAKA,IAaeA,EAXD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACV,kBAACC,EAAD,KACI,kBAACC,EAAD,CAAQC,IAAG,UAJC,sCAID,OAAmBH,EAAMI,aAAeC,IAAKL,EAAMM,QAC9D,kBAACC,EAAD,KACI,4BAAKP,EAAMM,OACX,qCAAON,EAAMQ,WACb,kBAAC,IAAD,CAAMC,GAAE,WAAMT,EAAMU,KAApB,iBAgBNH,EAAeI,IAAOC,IAAV,KA6BZX,EAAWU,IAAOC,IAAV,KAcRV,EAASS,IAAOE,IAAV,K,2QCnEZ,IAUed,EARD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACV,kBAACc,EAAD,KACI,kBAAC,IAAD,CAAMC,IAAKf,EAAMU,GAAID,GAAE,WAAMT,EAAMU,KAC/B,yBAAKP,IAAG,UALA,kCAKA,OAAmBH,EAAMI,aAAeC,IAAKL,EAAMM,WAajEQ,EAAeH,IAAOC,IAAV,K,4yBC8EHI,E,4MA/FXC,MAAQ,CACJC,iBAAkB,GAClBC,eAAgB,EAChBC,cAAe,I,EAsCnBC,WAAa,SAAUC,GACD,SAAdA,EACIC,KAAKN,MAAME,eAAiB,EAC5BI,KAAKC,UAAS,SAACC,GAAD,MAAgB,CAC1BN,eAAgBM,EAAUN,eAAiB,MAEV,IAA9BI,KAAKN,MAAME,gBAClBI,KAAKC,SAAS,CACVL,eAAgB,IAGH,SAAdG,IACHC,KAAKN,MAAME,eAAiB,EAC5BI,KAAKC,UAAS,SAACC,GAAD,MAAgB,CAC1BN,eAAgBM,EAAUN,eAAiB,MAEV,IAA9BI,KAAKN,MAAME,gBAClBI,KAAKC,SAAS,CACVL,eAAgB,M,iMApDpBA,EAAmBI,KAAKN,MAAxBE,e,kBAEqBO,MAClB,uKADuB,OACkJP,I,cAD1KQ,E,gBAGyBA,EAAWC,O,cAApCV,E,iBACgBQ,MACf,4F,eADDG,E,iBAGsBA,EAAQD,O,QAA9BR,E,OACNG,KAAKC,SAAS,CACVN,iBAAkBA,EAAiBY,QACnCV,cAAeA,EAAcU,U,wUAQ7BX,EAAmBI,KAAKN,MAAxBE,e,kBAEqBO,MAClB,uKADuB,OACkJP,I,cAD1KQ,E,gBAGyBA,EAAWC,O,OAApCV,E,OACNK,KAAKC,SAAS,CACVN,iBAAkBA,EAAiBY,U,iMA+BrC,IAAD,SACuDP,KAAKN,MAAzDC,EADH,EACGA,iBAAkBC,EADrB,EACqBA,eAAgBC,EADrC,EACqCA,cAC1C,OACI,6BACI,0CACA,kBAACW,EAAD,KACKb,EAAiBc,KAAI,SAAChC,GAAD,OAClB,kBAACiC,EAAD,CAAUlB,IAAKf,EAAMU,GAAIV,MAAOA,QAGxC,6BACI,kBAACkC,EAAD,CAAaC,QAAS,kBAAM,EAAKd,WAAW,UAA5C,QAGA,6CAAeF,EAAf,UACA,kBAACe,EAAD,CAAaC,QAAS,kBAAM,EAAKd,WAAW,UAA5C,SAIJ,8CACA,kBAACe,EAAD,KACKhB,EAAcY,KAAI,SAAChC,GAAD,OACf,kBAAC,EAAD,CAAOe,IAAKf,EAAMU,GAAIV,MAAOA,a,GAxF5BqC,aAkGnBN,EAAepB,IAAOC,IAAV,KASZwB,EAAYzB,IAAOC,IAAV,KAOTsB,EAAcvB,IAAO2B,OAAV,K,8/CClHjB,IAAMC,EAAY,iCA8FHC,E,4MA1FXvB,MAAQ,CACJjB,MAAO,GACPyC,UAAW,GACXC,cAAe,I,qMAIPC,EAAUpB,KAAKqB,MAAfD,M,kBAEqBjB,MAAM,sCAAD,OACYiB,EAAME,OAAOnC,GADzB,6D,cAAxBoC,E,gBAG0BpB,MAAM,sCAAD,OACKiB,EAAME,OAAOnC,GADlB,qE,cAA/BqC,E,iBAG2BrB,MAAM,sCAAD,OACIiB,EAAME,OAAOnC,GADjB,qE,eAAhCsC,E,iBAGcF,EAAWlB,O,eAAzB5B,E,iBACgB+C,EAAkBnB,O,eACxCa,GADIA,E,QACkBQ,KAAKC,MAAM,EAAG,G,UACVF,EAAmBpB,O,QAC7Cc,GADIA,E,QAC0BZ,QAAQoB,MAAM,EAAG,GAC/C3B,KAAKC,SAAS,CACVxB,QACAyC,YACAC,kB,iMAOF,IAAD,EACuCnB,KAAKN,MAAzCjB,EADH,EACGA,MAAOyC,EADV,EACUA,UAAWC,EADrB,EACqBA,cAC1B,OACI,kBAACS,EAAD,KACI,kBAACC,EAAD,CACIC,SAAQ,UAzCN,sCAyCM,OAAqBrD,EAAMsD,iBAEvC,kBAACC,EAAD,KACI,yBAAKpD,IAAG,UAAKoC,GAAL,OAAiBvC,EAAMI,aAAeC,IAAI,KAClD,6BACI,4BAAKL,EAAMM,OACX,kBAACkD,EAAD,CAAQC,OAAQzD,EAAM0D,cACI,GAArB1D,EAAM0D,aADX,mBAGA,4BAAK1D,EAAM2D,cACX,2BAAI3D,EAAMQ,YAGlB,oCACA,kBAACoD,EAAD,KACKnB,EAAUT,KAAI,SAACiB,GAAD,OACX,yBAAKlC,IAAKkC,EAAKvC,IACX,yBACIP,IAAG,UAAKoC,GAAL,OAAiBU,EAAKY,cACzBxD,IAAK4C,EAAKa,OAEd,8BAAOb,EAAKc,WACZ,6BACA,4CACA,6BACA,8BAAOd,EAAKa,WAIvBpB,EAAcsB,OAAS,EACpB,8CAEA,uDAEJ,kBAACC,EAAD,KACKvB,EAAcV,KAAI,SAACiB,GAAD,OACf,kBAAC,EAAD,CAAOlC,IAAKkC,EAAKvC,GAAIV,MAAOiD,a,GA3E1BZ,aA6FpBe,EAAgBzC,IAAOC,IAAV,KAGG,SAACgC,GAAD,OAAWA,EAAMS,YAGjCF,EAAexC,IAAOC,IAAV,KAIZgD,EAAOjD,IAAOC,IAAV,KAYJqD,EAAUtD,IAAOC,IAAV,KAQP2C,EAAY5C,IAAOC,IAAV,KAeT4C,EAAS7C,IAAOuD,KAAV,KAaK,SAACtB,GAAD,OAA0B,GAAfA,EAAMa,U,4PCnJlC,IAmBeU,EAnBH,kBACR,kBAAC,IAAD,CAAYC,SAAS,KACjB,yBAAKC,UAAU,OACX,kBAACC,EAAD,KACI,kBAAC,IAAD,CAAM7D,GAAG,KAAT,uBAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO8D,OAAK,EAACC,KAAK,IAAIC,UAAWzD,IACjC,kBAAC,IAAD,CACIwD,KAAK,OACLE,OAAQ,SAAC9B,GAAD,OACJ,kBAAC,EAAD,eAAa7B,IAAK4D,KAAKC,OAAWhC,WAUpD0B,EAAS3D,IAAOkE,OAAV,KCrBQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStC,MACvB,2DCZNuC,IAASR,OAAO,kBAAC,EAAD,MAASS,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2d808cc8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/original';\n\nconst Movie = ({ movie }) => (\n    <MovieDiv>\n        <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n        <NewMovieCard>\n            <h1>{movie.title}</h1>\n            <p>{`${movie.overview}`}</p>\n            <Link to={`/${movie.id}`}>Learn More</Link>\n        </NewMovieCard>\n    </MovieDiv>\n);\n\nexport default Movie;\n\nMovie.propTypes = {\n    movie: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        poster_path: PropTypes.string.isRequired,\n        overview: PropTypes.string.isRequired,\n        id: PropTypes.number.isRequired,\n    }).isRequired,\n};\n\nconst NewMovieCard = styled.div`\n    position: absolute;\n    padding: 20px;\n    box-sizing: border-box;\n    text-align: center;\n    display: block;\n    background: rgba(255, 239, 217, 0.8);\n    height: 100%;\n    width: 100%;\n    text-align: left;\n    transition: opacity 0.3s ease-in-out;\n    overflow: scroll;\n    top: 0;\n    opacity: 0;\n    > h1,\n    > p {\n        color: black;\n    }\n    > h1 {\n        margin: 0;\n    }\n    > a {\n        display: inline-block;\n        background: coral;\n        border-radius: 5px;\n        padding: 5px 10px;\n    }\n`;\n\nconst MovieDiv = styled.div`\n    position: relative;\n    width: 100%;\n    :hover {\n        /* z-index: 2; */\n        /* > img {\n      z-index: 3;\n    } */\n        > div {\n            opacity: 1;\n        }\n    }\n`;\n\nconst Poster = styled.img`\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    position: relative;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\n\nconst Movie = ({ movie }) => (\n    <PopularMovie>\n        <Link key={movie.id} to={`/${movie.id}`}>\n            <img src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n        </Link>\n    </PopularMovie>\n);\n\nexport default Movie;\n\nMovie.propTypes = {\n    movie: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nconst PopularMovie = styled.div`\n    width: 100%;\n    > a {\n        width: 100%;\n        height: 100%;\n\n        > img {\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n        }\n    }\n`;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport NewMovie from './NewMovie';\nimport Movie from './Movie';\n\nclass MoviesList extends Component {\n    state = {\n        nowPlayingMovies: [],\n        nowPlayingPage: 1,\n        popularMovies: [],\n    };\n\n    async componentDidMount() {\n        const { nowPlayingPage } = this.state;\n        try {\n            const nowPlaying = await fetch(\n                `${'https://api.themoviedb.org/3/movie/now_playing?api_key=e223c8dda88d58c4a35436bfed991d9d&language=en-US&region=US&sort_by=release_date.desc&include_adult=false&page='}${nowPlayingPage}`\n            );\n            const nowPlayingMovies = await nowPlaying.json();\n            const popular = await fetch(\n                `${'https://api.themoviedb.org/3/trending/movie/day?api_key=e223c8dda88d58c4a35436bfed991d9d'}`\n            );\n            const popularMovies = await popular.json();\n            this.setState({\n                nowPlayingMovies: nowPlayingMovies.results,\n                popularMovies: popularMovies.results,\n            });\n        } catch (error) {\n            // continue\n        }\n    }\n\n    async componentDidUpdate() {\n        const { nowPlayingPage } = this.state;\n        try {\n            const nowPlaying = await fetch(\n                `${'https://api.themoviedb.org/3/movie/now_playing?api_key=e223c8dda88d58c4a35436bfed991d9d&language=en-US&region=US&sort_by=release_date.desc&include_adult=false&page='}${nowPlayingPage}`\n            );\n            const nowPlayingMovies = await nowPlaying.json();\n            this.setState({\n                nowPlayingMovies: nowPlayingMovies.results,\n            });\n        } catch (error) {\n            // continue\n        }\n    }\n\n    changePage = function (pageValue) {\n        if (pageValue === 'next') {\n            if (this.state.nowPlayingPage < 5) {\n                this.setState((prevState) => ({\n                    nowPlayingPage: prevState.nowPlayingPage + 1,\n                }));\n            } else if (this.state.nowPlayingPage === 5) {\n                this.setState({\n                    nowPlayingPage: 1,\n                });\n            }\n        } else if (pageValue === 'prev') {\n            if (this.state.nowPlayingPage > 1) {\n                this.setState((prevState) => ({\n                    nowPlayingPage: prevState.nowPlayingPage - 1,\n                }));\n            } else if (this.state.nowPlayingPage === 1) {\n                this.setState({\n                    nowPlayingPage: 5,\n                });\n            }\n        }\n    };\n\n    render() {\n        const { nowPlayingMovies, nowPlayingPage, popularMovies } = this.state;\n        return (\n            <div>\n                <h1>New Movies</h1>\n                <NewMovieGrid>\n                    {nowPlayingMovies.map((movie) => (\n                        <NewMovie key={movie.id} movie={movie} />\n                    ))}\n                </NewMovieGrid>\n                <div>\n                    <PageControl onClick={() => this.changePage('prev')}>\n                        Prev\n                    </PageControl>\n                    <span>{`Page ${nowPlayingPage} of 5`}</span>\n                    <PageControl onClick={() => this.changePage('next')}>\n                        Next\n                    </PageControl>\n                </div>\n                <h1>Popular Movies</h1>\n                <MovieGrid>\n                    {popularMovies.map((movie) => (\n                        <Movie key={movie.id} movie={movie} />\n                    ))}\n                </MovieGrid>\n            </div>\n        );\n    }\n}\n\nexport default MoviesList;\n\nconst NewMovieGrid = styled.div`\n    width: 90%;\n    margin: 0 auto;\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    grid-gap: 20px;\n    margin-bottom: 20px;\n`;\n\nconst MovieGrid = styled.div`\n    width: 90%;\n    margin: 0 auto;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-gap: 20px;\n`;\nconst PageControl = styled.button`\n    background-color: transparent;\n    margin: 0 10px;\n    font-size: 16px;\n    margin-bottom: 20px;\n    transition: all 0.3s ease-in-out;\n    border: 2px solid white;\n    border-radius: 5px;\n    padding: 2px 6px;\n    :hover {\n        cursor: pointer;\n        color: coral;\n        border-color: coral;\n    }\n`;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Movie from './Movie';\n\nconst W154_PATH = 'http://image.tmdb.org/t/p/w154';\nconst BACKDROP_PATH = 'http://image.tmdb.org/t/p/original';\n\nclass MovieDetail extends Component {\n    state = {\n        movie: {},\n        movieCast: [],\n        similarMovies: [],\n    };\n\n    async componentDidMount() {\n        const { match } = this.props;\n        try {\n            const movieFetch = await fetch(\n                `https://api.themoviedb.org/3/movie/${match.params.id}?api_key=e223c8dda88d58c4a35436bfed991d9d&language=en-US`\n            );\n            const movieCreditsFetch = await fetch(\n                `https://api.themoviedb.org/3/movie/${match.params.id}/credits?api_key=e223c8dda88d58c4a35436bfed991d9d&language=en-US`\n            );\n            const similarMoviesFetch = await fetch(\n                `https://api.themoviedb.org/3/movie/${match.params.id}/similar?api_key=e223c8dda88d58c4a35436bfed991d9d&language=en-US`\n            );\n            const movie = await movieFetch.json();\n            let movieCast = await movieCreditsFetch.json();\n            movieCast = movieCast.cast.slice(0, 6);\n            let similarMovies = await similarMoviesFetch.json();\n            similarMovies = similarMovies.results.slice(0, 6);\n            this.setState({\n                movie,\n                movieCast,\n                similarMovies,\n            });\n        } catch (error) {\n            // continue\n        }\n    }\n\n    render() {\n        const { movie, movieCast, similarMovies } = this.state;\n        return (\n            <MovieWrapper>\n                <MovieBackdrop\n                    backdrop={`${BACKDROP_PATH}${movie.backdrop_path}`}\n                />\n                <MovieInfo>\n                    <img src={`${W154_PATH}${movie.poster_path}`} alt=\"\" />\n                    <div>\n                        <h1>{movie.title}</h1>\n                        <Rating rating={movie.vote_average}>\n                            {movie.vote_average * 10}% Viewer Rating\n                        </Rating>\n                        <h3>{movie.release_date}</h3>\n                        <p>{movie.overview}</p>\n                    </div>\n                </MovieInfo>\n                <h2>Cast</h2>\n                <Cast>\n                    {movieCast.map((cast) => (\n                        <div key={cast.id}>\n                            <img\n                                src={`${W154_PATH}${cast.profile_path}`}\n                                alt={cast.name}\n                            />\n                            <span>{cast.character}</span>\n                            <br />\n                            <span>Played by:</span>\n                            <br />\n                            <span>{cast.name}</span>\n                        </div>\n                    ))}\n                </Cast>\n                {similarMovies.length > 0 ? (\n                    <h2>Related movies</h2>\n                ) : (\n                    <h2>No similar movies found</h2>\n                )}\n                <Similar>\n                    {similarMovies.map((cast) => (\n                        <Movie key={cast.id} movie={cast} />\n                    ))}\n                </Similar>\n            </MovieWrapper>\n        );\n    }\n}\n\nMovieDetail.propTypes = {\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            id: PropTypes.string.isRequired,\n        }).isRequired,\n    }).isRequired,\n};\n\nexport default MovieDetail;\n\nconst MovieBackdrop = styled.div`\n    width: 100vw;\n    height: 50vh;\n    background: url(${(props) => props.backdrop}) no-repeat top/cover;\n`;\n\nconst MovieWrapper = styled.div`\n    position: relative;\n`;\n\nconst Cast = styled.div`\n    margin: 0 auto;\n    display: grid;\n    grid-template-columns: repeat(6, 1fr);\n    width: 80%;\n    grid-gap: calc(100% / 10);\n    img {\n        height: 214px;\n        display: block;\n    }\n`;\n\nconst Similar = styled.div`\n    margin: 0 auto;\n    display: grid;\n    grid-template-columns: repeat(6, 1fr);\n    width: 80%;\n    grid-gap: calc(100% / 10);\n`;\n\nconst MovieInfo = styled.div`\n    background: #222;\n    text-align: left;\n    padding: 0 10%;\n    display: flex;\n    box-shadow: 0 -15px 15px 0px black;\n    > div {\n        margin-left: 20px;\n    }\n    > img {\n        position: relative;\n        top: -5rem;\n    }\n`;\n\nconst Rating = styled.span`\n    position: relative;\n    ::before {\n        content: '';\n        position: absolute;\n        width: 100%;\n        height: 5px;\n        top: -5px;\n        background: #a00;\n    }\n    &:after {\n        content: '';\n        position: absolute;\n        width: ${(props) => props.rating * 10}%;\n        height: 5px;\n        top: -5px;\n        left: 0;\n        background: #2bc400;\n        box-shadow: 0px 0px 5px #2bc400;\n    }\n`;\n","import React from 'react';\nimport {\n    BrowserRouter as HashRouter,\n    Route,\n    Switch,\n    Link,\n} from 'react-router-dom';\nimport styled from 'styled-components';\n// import './App.css';\nimport MoviesList from './MoviesList';\nimport MovieDetail from './MovieDetail';\n\nconst App = () => (\n    <HashRouter basename=\"/\">\n        <div className=\"App\">\n            <Header>\n                <Link to=\"/\">The Movie Database</Link>\n            </Header>\n            <Switch>\n                <Route exact path=\"/\" component={MoviesList} />\n                <Route\n                    path=\"/:id\"\n                    render={(props) => (\n                        <MovieDetail key={Date.now()} {...props} />\n                    )}\n                />\n            </Switch>\n        </div>\n    </HashRouter>\n);\n\nexport default App;\n\nconst Header = styled.header`\n    font-size: 32px;\n    background-color: #111;\n    padding: 40px;\n    > a {\n        border: 4px solid white;\n        padding: 10px 20px;\n        border-radius: 5px;\n    }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}