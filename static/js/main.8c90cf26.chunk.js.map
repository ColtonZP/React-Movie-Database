{"version":3,"sources":["logo.svg","NewMovie.js","Movie.js","MoviesList.js","MovieDetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Movie","movie","MovieDiv","Poster","src","poster_path","alt","title","NewMovieCard","overview","to","id","styled","div","img","key","Title","span","MoviesList","state","nowPlayingMovies","nowPlayingPage","popularMovies","changePage","pageValue","this","setState","prevState","fetch","nowPlaying","json","popular","results","NewMovieGrid","map","NewMovie","PageControl","onClick","MovieGrid","Component","button","W154_PATH","MovieDetail","movieCast","similarMovies","match","props","params","movieFetch","movieCreditsFetch","similarMoviesFetch","cast","slice","MovieWrapper","MovieBackdrop","backdrop","backdrop_path","MovieInfo","Rating","rating","vote_average","release_date","Cast","profile_path","character","name","length","Similar","App","className","Logo","logo","exact","path","component","render","Date","now","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c90cf26.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.37f8240d.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/original';\n\nconst Movie = ({ movie }) => (\n  <MovieDiv>\n    <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n    <NewMovieCard>\n      <h1>{movie.title}</h1>\n      <p>{`${movie.overview}`}</p>\n      <Link to={`/React-Movie-Database/${movie.id}`}>Learn More</Link>\n    </NewMovieCard>\n  </MovieDiv>\n);\n\nexport default Movie;\n\nMovie.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nconst NewMovieCard = styled.div`\n  position: absolute;\n  top: -10px;\n  padding-left: calc(100% + 20px);\n  box-sizing: border-box;\n  text-align: center;\n  display: none;\n  background: #ffefd9;\n  min-width: 250%;\n  height: calc(100% + 20px);\n  box-shadow: 0 0 15px 5px black;\n  text-align: left;\n  transition: width .3s ease-in-out;\n  overflow: hidden;\n  > h1 {\n    white-space: nowrap;\n  }\n  > h1, > p, > a {\n    color: black;\n  }\n  > a {\n    width: calc(60% - 20px);\n    display: block;\n    position: absolute;\n    box-shadow: 0px 0px 15px 25px #ffefd9;\n    background: #ffefd9;\n    bottom: 10px;\n    transition: color .3s ease-in-out;\n    :hover {\n      color: coral;\n    }\n  }\n`;\n\nconst MovieDiv = styled.div`\n  position: relative;\n  width: calc(100%/7);\n  margin: 10px calc(100%/14);\n  :nth-child(4n+1) {\n    margin-left: 0;\n  }\n  :nth-child(4n+4) {\n    margin-right: 0;\n    > div {\n      right: -10px;\n      padding-right: calc(100% + 20px);\n      padding-left: 0;\n      text-align: right;\n      padding-left: 10px;\n      > a {\n        left: 0;\n      }\n    }\n  }\n   :not(:nth-child(4n+4)) {\n    > div {\n      left: -10px;\n      padding-right: 10px;\n     }\n  }\n  :hover {\n    z-index: 2;\n    > img {\n      z-index: 3;\n    }\n    > div {\n      display: block;\n    }\n  }\n`;\n\nconst Poster = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  position: relative;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\n\nconst Movie = ({ movie }) => (\n  <Link key={movie.id} to={`/React-Movie-Database/${movie.id}`}>\n    <img src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n    <Title>{movie.title}</Title>\n  </Link>\n);\n\nexport default Movie;\n\nMovie.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nconst Title = styled.span`\n  display: block;\n`;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport NewMovie from './NewMovie';\nimport Movie from './Movie';\n\nclass MoviesList extends Component {\n  state = {\n    nowPlayingMovies: [],\n    nowPlayingPage: 1,\n    popularMovies: [],\n  }\n\n  async componentDidMount() {\n    const { nowPlayingPage } = this.state;\n    try {\n      const nowPlaying = await fetch(`${'https://api.themoviedb.org/3/movie/now_playing?api_key=e223c8dda88d58c4a35436bfed991d9d&language=en-US&region=US&sort_by=release_date.desc&include_adult=false&page='}${nowPlayingPage}`);\n      const nowPlayingMovies = await nowPlaying.json();\n      const popular = await fetch(`${'https://api.themoviedb.org/3/trending/movie/day?api_key=e223c8dda88d58c4a35436bfed991d9d'}`);\n      const popularMovies = await popular.json();\n      this.setState({\n        nowPlayingMovies: nowPlayingMovies.results,\n        popularMovies: popularMovies.results,\n      });\n    } catch (error) {\n      // continue\n    }\n  }\n\n  async componentDidUpdate() {\n    const { nowPlayingPage } = this.state;\n    try {\n      const nowPlaying = await fetch(`${'https://api.themoviedb.org/3/movie/now_playing?api_key=e223c8dda88d58c4a35436bfed991d9d&language=en-US&region=US&sort_by=release_date.desc&include_adult=false&page='}${nowPlayingPage}`);\n      const nowPlayingMovies = await nowPlaying.json();\n      this.setState({\n        nowPlayingMovies: nowPlayingMovies.results,\n      });\n    } catch (error) {\n      // continue\n    }\n  }\n\n  changePage = function (pageValue) {\n    if (pageValue === 'next') {\n      if (this.state.nowPlayingPage < 3) {\n        this.setState((prevState) => ({ nowPlayingPage: prevState.nowPlayingPage + 1 }));\n      } else if (this.state.nowPlayingPage === 3) {\n        this.setState({\n          nowPlayingPage: 1,\n        });\n      }\n    } else if (pageValue === 'prev') {\n      if (this.state.nowPlayingPage > 1) {\n        this.setState((prevState) => ({ nowPlayingPage: prevState.nowPlayingPage - 1 }));\n      } else if (this.state.nowPlayingPage === 1) {\n        this.setState({\n          nowPlayingPage: 3,\n        });\n      }\n    }\n  }\n\n  render() {\n    const { nowPlayingMovies, nowPlayingPage, popularMovies } = this.state;\n    return (\n      <div>\n        <h1>Now Playing:</h1>\n        <NewMovieGrid>\n          {nowPlayingMovies.map((movie) => <NewMovie key={movie.id} movie={movie} />)}\n        </NewMovieGrid>\n        <div>\n          <PageControl onClick={() => this.changePage('prev')}>Prev</PageControl>\n          <span>{`Page ${nowPlayingPage} of 3`}</span>\n          <PageControl onClick={() => this.changePage('next')}>Next</PageControl>\n        </div>\n        <h1>On The Rise</h1>\n        <MovieGrid>\n          {popularMovies.map((movie) => <Movie key={movie.id} movie={movie} />)}\n        </MovieGrid>\n      </div>\n    );\n  }\n}\n\nexport default MoviesList;\n\nconst NewMovieGrid = styled.div`\n  width: 80%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n`;\n\nconst MovieGrid = styled.div`\n  display: grid;\n  padding: 1rem;\n  grid-template-columns: repeat(5, 1fr);\n  grid-row-gap: 1rem;\n`;\nconst PageControl = styled.button`\n  background-color: transparent;\n  margin: 0 10px;\n  font-size: 16px;\n  transition: all .3s ease-in-out;\n  :hover {\n    cursor: pointer;\n    color: coral;\n    border-color: coral;\n  }\n`;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Movie from './Movie';\n\nconst W154_PATH = 'http://image.tmdb.org/t/p/w154';\nconst BACKDROP_PATH = 'http://image.tmdb.org/t/p/original';\n\nclass MovieDetail extends Component {\n  state = {\n    movie: {},\n    movieCast: [],\n    similarMovies: [],\n  }\n\n  async componentDidMount() {\n    const { match } = this.props;\n    try {\n      const movieFetch = await fetch(`https://api.themoviedb.org/3/movie/${match.params.id}?api_key=e223c8dda88d58c4a35436bfed991d9d&language=en-US`);\n      const movieCreditsFetch = await fetch(`https://api.themoviedb.org/3/movie/${match.params.id}/credits?api_key=e223c8dda88d58c4a35436bfed991d9d&language=en-US`);\n      const similarMoviesFetch = await fetch(`https://api.themoviedb.org/3/movie/${match.params.id}/similar?api_key=e223c8dda88d58c4a35436bfed991d9d&language=en-US`);\n      const movie = await movieFetch.json();\n      let movieCast = await movieCreditsFetch.json();\n      movieCast = movieCast.cast.slice(0, 6);\n      let similarMovies = await similarMoviesFetch.json();\n      similarMovies = similarMovies.results.slice(0, 6);\n      this.setState({\n        movie,\n        movieCast,\n        similarMovies,\n      });\n    } catch (error) {\n      // continue\n    }\n  }\n\n  render() {\n    const { movie, movieCast, similarMovies } = this.state;\n    return (\n      <MovieWrapper>\n        <MovieBackdrop backdrop={`${BACKDROP_PATH}${movie.backdrop_path}`} />\n        <MovieInfo>\n          <img src={`${W154_PATH}${movie.poster_path}`} alt=\"\" />\n          <div>\n            <h1>{movie.title}</h1>\n            <Rating rating={movie.vote_average}>\n              {movie.vote_average}\n              % Viewer Rating\n            </Rating>\n            <h3>{movie.release_date}</h3>\n            <p>{movie.overview}</p>\n          </div>\n        </MovieInfo>\n        <h2>Cast</h2>\n        <Cast>\n          {movieCast.map((cast) => (\n            <div key={cast.id}>\n              <img src={`${W154_PATH}${cast.profile_path}`} alt=\"\" />\n              <span>{cast.character}</span>\n              <span>Played by:</span>\n              <span>{cast.name}</span>\n            </div>\n          ))}\n        </Cast>\n        {(similarMovies.length > 0) ? <h2>Related movies</h2> : <h2>No similar movies found</h2>}\n        <Similar>\n          {similarMovies.map((cast) => <Movie key={cast.id} movie={cast} />)}\n        </Similar>\n      </MovieWrapper>\n    );\n  }\n}\n\nMovieDetail.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default MovieDetail;\n\nconst MovieBackdrop = styled.div`\nwidth: 100vw;\nheight: 50vh;\nbackground: url(${(props) => props.backdrop}) no-repeat top/cover;\n`;\n\nconst MovieWrapper = styled.div`\n  position: relative;\n  \n`;\n\nconst Cast = styled.div`\n  padding: 10px 0;\n  display: flex;\n  flex-wrap: wrap;\n  width: 80%;\n  margin: 0 auto;\n  justify-content: space-between;\n  > div {\n    width: 30%;\n    > img {\n      float: left;\n      margin-right: 10px;\n      margin-bottom: 10px;\n    }\n    > span {\n      margin: auto;\n      display: block;\n      text-align: left;\n    }\n  }\n`;\n\nconst Similar = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 80%;\n  margin: 0 auto;\n  justify-content: space-between;\n  > a {\n    width: 30%;\n    margin-bottom: 10px;\n    > img {\n      float: left;\n      margin-right: 10px;\n    }\n    > span {\n      text-align: left;\n    }\n  }\n`;\n\nconst MovieInfo = styled.div`\n  background: #222;\n  text-align: left;\n  padding: 0 10%;\n  display: flex;\n  box-shadow: 0 -15px 15px 0px black;\n  > div {\n    margin-left: 20px;\n  }\n  > img {\n    position: relative;\n    top: -5rem;\n  }\n`;\n\nconst Rating = styled.span`\nposition: relative;\n  ::before {\n    content: '';\n    position: absolute;\n    width: 100%;\n    height: 5px;\n    top: -5px;\n    background: #a00;\n  }\n  &:after {\n    content: '';\n    position: absolute;\n    width: ${(props) => props.rating * 10}%;\n    height: 5px;\n    top: -5px;\n    left: 0;\n    background: #2bc400;\n    box-shadow: 0px 0px 5px #2bc400;\n  }\n`;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link,\n} from 'react-router-dom';\nimport styled from 'styled-components';\nimport logo from './logo.svg';\nimport './App.css';\nimport MoviesList from './MoviesList';\nimport MovieDetail from './MovieDetail';\n\nconst App = () => (\n  <Router>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Link to=\"/React-Movie-Database/\">\n          <Logo src={logo} alt=\"React Movies\" />\n        </Link>\n      </header>\n      <Switch>\n        <Route exact path=\"/React-Movie-Database/\" component={MoviesList} />\n        <Route path=\"/React-Movie-Database/:id\" render={(props) => <MovieDetail key={Date.now()} {...props} />} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n\nconst Logo = styled.img`\n  height: 50px;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}